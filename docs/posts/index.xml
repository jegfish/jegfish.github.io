<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Jeffrey Fisher</title><link>https://jeffreyfisher.net/posts/</link><description>Recent content in Posts on Jeffrey Fisher</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jeffreyfisher.net/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>SnailCheck: Laziness from scratch in OCaml</title><link>https://jeffreyfisher.net/posts/snailcheck_laziness-from-scratch-in-ocaml/</link><pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate><guid>https://jeffreyfisher.net/posts/snailcheck_laziness-from-scratch-in-ocaml/</guid><description>I will be taking you through the design of an enumerative property-based testing (PBT) library, inspired by PearlCheckÂ 1 and LeanCheck. Like them, SnailCheck&amp;rsquo;s main focus is on being easy to understand. One reason I am doing this is to develop a deeper understanding of the details that PearlCheck (rightfully) skips.
Our first stop will be laziness.
Property-based testing (PBT) Later posts will give a better idea of what property-based testing is, but for now I&amp;rsquo;ll give a quick definition.</description></item></channel></rss>