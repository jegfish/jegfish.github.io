<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Jeffrey Fisher</title><link>https://jeffreyfisher.net/</link><description>Recent content on Jeffrey Fisher</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 04 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jeffreyfisher.net/index.xml" rel="self" type="application/rss+xml"/><item><title>SnailCheck: Laziness from scratch in OCaml</title><link>https://jeffreyfisher.net/posts/snailcheck_laziness-from-scratch-in-ocaml/</link><pubDate>Sun, 04 Jun 2023 00:00:00 +0000</pubDate><guid>https://jeffreyfisher.net/posts/snailcheck_laziness-from-scratch-in-ocaml/</guid><description>Note: You do not need to be well versed in OCaml or property-based testing to understand this article. I believe the core idea should apply to any language with closures.
I will be taking you through the design of an enumerative property-based testing (PBT) library, inspired by PearlCheckÂ 1 and LeanCheck. Like them, SnailCheck&amp;rsquo;s main focus is on being easy to understand. One reason I am doing this is to develop a deeper understanding of the details that PearlCheck (rightfully) skips.</description></item><item><title>About</title><link>https://jeffreyfisher.net/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jeffreyfisher.net/about/</guid><description>Contact Email jeffrey@jeffreyfisher.net (mailto link)</description></item></channel></rss>